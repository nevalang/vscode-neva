// comments

import {
    std:io

    @:my_lovely_mod/foo
    @:my_lovely_mod/bar/baz

	github.com/nevalang/x
}

type User struct {
    age int
    name string
    bestFriend struct {
        isDog bool // should be true
    }
}

pub type Primitive union {
    Bool bool
    String string
    Num union {
        Int int
        Float float
    }
}

pub type Users list<User>

interface IStreamHandler<T>(seq stream<T>) (res T)

pub interface IListStreamer<T>(l list<T>) (seq stream<T>)

const greeting string = 'Hello, World!'

pub const nums list<int> = [1, 2, 3, 4, 5]

const pi float = 3.14
const greet string = "Hello, world!"
pub const nums list<int> = [1, 2, 3, 4, 5]

#extern(bool_parser)
pub def BoolParser(s string) (res bool, err error)

const b = true
const b2 = false

def Main(start any) (stop any) {
	printer Printer<string>
	---
    :start -> { $greeting -> printer:data }
    printer:sig -> :stop
}

def Main(start any) (stop any) {
	printer Printer<string>
	---
    :start -> { 'Hello, World!' -> printer:data }
    printer:sig -> :stop
}

def Main(start any) (stop any) {
    bypass Bypass<float>
    printer Printer<float>
    writer foo.FileWriter
    ---
    :start -> { pi -> bypass:foo }
    bypass:bar -> [printer:msg, writer:msg]
    printer:msg -> :stop
}

pub def Bypass<T float>(foo T) (bar T) {
    :foo -> :bar
}

def Main(enter any) (exit any) {
    bypass Bypass<float>
    printer Printer<float>
    writer foo.FileWriter
    ---
    :enter -> { pi -> bypass:foo }
    bypass:bar -> [printer:msg, writer:msg]
    printer:msg -> :exit
}

pub def Bypass<T float>(foo T) (bar T) {
    :foo -> :bar
}
