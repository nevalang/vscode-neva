// comments

import {
    std:io

    @:my_lovely_mod/foo
    @:my_lovely_mod/bar/baz

	github.com/nevalang/x
}

#extern(bool_parser)
pub def BoolParser(s string) (res bool, err error)

type Primitive Num | string | bool

pub type Num int | float

type User struct {
    age int
    name string
    bestFriend struct {
        isDog bool // should be true
    }
}

type {
    User struct {
        age int
        name string
        bestFriend struct {
            isDog bool // should be true
        }
    }
    pub Primitive Num | string | bool
    pub Users list<User>
}

interface IStreamHandler<T>(
    seq stream<T>
) (res int)

pub interface IListStreamer<T>(l list<T>) (seq stream<T>)

interface {
    IStreamHandler<T>(seq stream<T>) (res T)
    pub IListStreamer<T>(l list<T>) (seq stream<T>)
}

const greeting string = 'Hello, World!'

const greet string = "Hello, world!"

pub const nums list<int> = [1, 2, 3, 4, 5]

const pi float = 3.14
const greet string = "Hello, world!"
const pub nums list<int> = [1, 2, 3, 4, 5]

def Main(start any) (stop any) {
	printer Printer<string>
	---
    :start -> ($greeting -> printer:data)
    printer:sig -> :stop
}

def Main(start any) (stop any) {
	printer Printer<string>
	---
    :start -> ('Hello, World!' -> printer:data)
    printer:sig -> :stop
}

def Main(enter any) (exit any) {
    bypass Bypass<float>
    printer Printer<float>
    writer foo.FileWriter
    ---
    :enter -> (pi -> bypass:foo)
    bypass:bar -> [printer:msg, writer:msg]
    printer:msg -> :exit
}

pub def Bypass<T float>(foo T) (bar T) {
    net { :foo -> :bar }
}

def Main(enter any) (exit any) {
    bypass Bypass<float>
    printer Printer<float>
    writer foo.FileWriter
    ---
    :enter -> (pi -> bypass:foo)
    bypass:bar -> [printer:msg, writer:msg]
    printer:msg -> :exit
}

pub def Bypass<T float>(foo T) (bar T) {
    net { :foo -> :bar }
}
