---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: neva
scopeName: source.neva
fileTypes:
  - ".neva"

# ================================================================
# REPOSITORY (reusable patterns)
# ================================================================

repository:
  comments:
    patterns:
      - name: comment.line.double-slash
        begin: "\\/\\/" # Matches the start of a single-line comment (//)
        beginCaptures:
          "1":
            name: punctuation.definition.comment
        end: "(?:\\n|$)" # Matches the end of a line or the end of the input

  pub:
    match: "\\b(pub)\\b" # Matches the keyword 'pub'
    name: storage.modifier.public

  # ----------------------------------------------------------------
  # TYPES
  # ----------------------------------------------------------------

  builtin_types:
    patterns:
      - match: "\\bany\\b" # Matches the keyword 'any'
        name: storage.type.any
      - match: "\\bmaybe\\b" # Matches the keyword 'maybe'
        name: storage.type.maybe
      - match: "\\bbool\\b" # Matches the keyword 'bool'
        name: storage.type.boolean
      - match: "\\b(int|float)\\b" # Matches the keywords 'int' or 'float'
        name: storage.type.numeric
      - match: "\\bstring\\b" # Matches the keyword 'string'
        name: storage.type.string
      - match: "\\bmap\\b" # Matches the keyword 'map'
        name: storage.type.map
      - match: "\\blist\\b" # Matches the keyword 'list'
        name: storage.type.list
      - match: "\\berror\\b" # Matches the keyword 'error'
        name: storage.type.error
      - match: "\\bstream\\b" # Matches the keyword 'stream'
        name: storage.type.stream
      - include: "#struct_type"
      - include: "#enum_type"

  struct_type:
    patterns:
      - begin: "\\b(struct)\\s*\\{"
        beginCaptures:
          "1":
            name: keyword.struct
        end: "\\}"
        patterns:
          - include: "#builtin_types" # recursion
          - include: "#comments"

  enum_type:
    patterns:
      - begin: "\\b(enum)\\s*\\{"
        beginCaptures:
          "1":
            name: storage.type.enum
        end: "\\}"
        name: variable.other.enummember

  # ----------------------------------------------------------------
  # CONSTANT LITERALS
  # ----------------------------------------------------------------

  const_literals:
    patterns:
      - include: "#nil_literal"
      - include: "#bool_literals"
      - include: "#num_literals"
      - include: "#string_literals"
      - include: "#list_literal"
      - include: "#struct_literal"

  num_literals:
    patterns:
      - match: "\\b0[xX][0-9a-fA-F]+\\b"
        name: constant.numeric.hexadecimal
      - match: "\\b[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?\\b"
        name: constant.numeric.float
      - match: "\\b[0-9]+\\b"
        name: constant.numeric.integer

  string_literals:
    patterns:
      - name: string.quoted.double
        begin: '"'
        end: '"'
        patterns:
          - match: \\""
            name: constant.character.escape.double-quote
      - name: string.quoted.single
        begin: "'"
        end: "'"
        patterns:
          - match: \\'"
            name: constant.character.escape.single-quote

  bool_literals:
    match: "\\b(true|false)"
    name: constant.language.boolean

  nil_literal:
    match: "\\b(nil)"
    name: constant.language.nil

  struct_literal: # and map literal
    patterns:
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#const_literals" # recursion

  list_literal:
    patterns:
      - begin: "\\["
        end: "\\]"
        patterns:
          - include: "#const_literals" # recursion

  # ----------------------------------------------------------------
  # OTHER
  # ----------------------------------------------------------------

  compiler_directives:
    patterns:
      - name: meta.directive
        begin: "\\#"
        beginCaptures:
          "1":
            name: meta.directive
        end: "(?:\\n|$)" # end of line or end of the input

  # ----------------------------------------------------------------
  # FLOWS
  # ----------------------------------------------------------------

  flow_nodes:
    patterns:
      - begin: "\\b(nodes)\\s*\\{"
        beginCaptures:
          "1":
            name: entity.name.section
        end: "\\}"
        patterns:
          - include: "#flow_nodes_body"
          - include: "#comments"

  flow_nodes_body:
    patterns:
      - include: "#builtin_types"
      - match: "^(\\s*)\\b(\\w+)\\b\\s+((\\w+\\.)*\\w+)\\b"
        captures:
          "2":
            name: variable.other.node
          "3":
            name: entity.name.function
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#flow_nodes_body" # DI
          - include: "#comments"

  flow_net:
    patterns:
      - include: "#bool_literals"
      - include: "#num_literals"
      - include: "#string_literals"
      - match: "\\$\\w+"
        name: variable.other.constant
      - match: "->"
        name: keyword.control
      - match: "\\:(\\w+)\\b" # io port addrs
        captures:
          "1":
            name: variable.parameter
      - match: "(\\w+)\\b\\:(\\w+)\\b" # norm port addrs
        captures:
          "1":
            name: variable.other.node
          "2":
            name: variable.parameter
      - match: "(\\w+)\\b" # io port addrs
        captures:
          "1":
            name: variable.parameter
      - include: "#comments"

# ================================================================
# PATTERNS (actual rules)
# ================================================================

patterns:
  - include: "#comments"
  - include: "#pub"
  - include: "#compiler_directives"

  # ----------------------------------------------------------------
  # IMPORTS
  # ----------------------------------------------------------------

  - begin: "\\b(import)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.import
    end: "\\}"
    patterns:
      - include: "#comments"

  # ----------------------------------------------------------------
  # TYPES
  # ----------------------------------------------------------------

  - begin: "\\b(type)"
    beginCaptures:
      "1":
        name: keyword.type
    end: "(?=\\b(import|pub|type|const|interface|flow)\\b)"
    patterns:
      - include: "#builtin_types"
      - include: "#comments"

  # ----------------------------------------------------------------
  # INTERFACES
  # ----------------------------------------------------------------

  - begin: "\\b(interface)"
    beginCaptures:
      "1":
        name: keyword.declaration.interfaces
    end: "(?=\\b(import|pub|type|const|interface|flow)\\b)"
    patterns:
      - include: "#builtin_types"
      - include: "#comments"

  # ----------------------------------------------------------------
  # CONSTANTS
  # ----------------------------------------------------------------

  - begin: "\\b(const)"
    beginCaptures:
      "1":
        name: keyword.declaration.const
    end: "(?=\\b(import|pub|type|const|interface|flow)\\b)"
    patterns:
      - include: "#builtin_types"
      - include: "#const_literals"
      - include: "#comments"

  # ----------------------------------------------------------------
  # FLOWS
  # ----------------------------------------------------------------

  - begin: "\\b(flow)\\s+\\b(\\w+)"
    beginCaptures:
      "1":
        name: keyword.declaration.function
      "2":
        name: entity.name.section
    end: "(?=\\b(import|pub|type|const|interface|flow)\\b)"
    patterns:
      - include: "#builtin_types"
      - include: "#flow_nodes"
      - include: "#flow_net"
      - include: "#comments"
